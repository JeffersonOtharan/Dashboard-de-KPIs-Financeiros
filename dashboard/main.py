#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üìä Dashboard Executivo de KPIs Financeiros
Monitoramento de KPIs Financeiros - N√≠vel Avan√ßado

Este dashboard fornece uma vis√£o executiva dos principais
indicadores financeiros da empresa.
"""

import streamlit as st
import pandas as pd
import mysql.connector
from mysql.connector import Error
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np
from datetime import datetime, timedelta
import logging

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="üìä Dashboard KPIs Financeiros",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Configura√ß√£o de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class DashboardKPIs:
    """Classe principal do dashboard de KPIs"""
    
    def __init__(self):
        """Inicializa o dashboard"""
        self.connection = None
        self.setup_connection()
    
    def setup_connection(self):
        """Configura conex√£o com o banco de dados"""
        try:
            # Configura√ß√µes do banco (em produ√ß√£o, usar vari√°veis de ambiente)
            self.connection = mysql.connector.connect(
                host='localhost',
                user='root',
                password='',  # Configurar conforme necess√°rio
                database='kpis_financeiros_avancado',
                charset='utf8mb4'
            )
            logger.info("‚úÖ Conex√£o com banco estabelecida")
        except Error as e:
            logger.error(f"‚ùå Erro na conex√£o: {e}")
            st.error("‚ùå Erro na conex√£o com o banco de dados")
    
    def execute_query(self, query):
        """Executa uma query e retorna DataFrame"""
        try:
            if not self.connection or not self.connection.is_connected():
                self.setup_connection()
            
            df = pd.read_sql(query, self.connection)
            return df
        except Exception as e:
            logger.error(f"‚ùå Erro na query: {e}")
            st.error(f"‚ùå Erro na execu√ß√£o da query: {e}")
            return pd.DataFrame()
    
    def get_resumo_executivo(self):
        """Obt√©m resumo executivo dos KPIs"""
        query = """
        SELECT * FROM vw_resumo_financeiro_executivo 
        WHERE ano = 2024 
        ORDER BY ano DESC, mes DESC
        """
        return self.execute_query(query)
    
    def get_margem_lucro(self):
        """Obt√©m dados de margem de lucro"""
        query = """
        SELECT * FROM vw_analise_margem_lucro 
        ORDER BY margem_lucro_percentual DESC
        """
        return self.execute_query(query)
    
    def get_receita_vs_meta(self):
        """Obt√©m dados de receita vs meta"""
        query = """
        SELECT * FROM vw_receita_vs_meta 
        WHERE ano = 2024 
        ORDER BY mes DESC, tipo, nome_categoria
        """
        return self.execute_query(query)
    
    def get_despesas_categoria(self):
        """Obt√©m dados de despesas por categoria"""
        query = """
        SELECT * FROM vw_despesas_por_categoria 
        ORDER BY total_despesas DESC
        """
        return self.execute_query(query)
    
    def get_tendencias(self):
        """Obt√©m dados de tend√™ncias financeiras"""
        query = """
        SELECT * FROM vw_tendencias_financeiras 
        WHERE ano = 2024 
        ORDER BY ano, mes
        """
        return self.execute_query(query)
    
    def render_header(self):
        """Renderiza o cabe√ßalho do dashboard"""
        st.title("üìä Dashboard Executivo de KPIs Financeiros")
        st.markdown("---")
        
        # M√©tricas principais
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                label="üè¢ Empresa",
                value="Empresa Exemplo Ltda",
                delta="Tecnologia"
            )
        
        with col2:
            st.metric(
                label="üìÖ Per√≠odo",
                value="2024",
                delta="Ano Atual"
            )
        
        with col3:
            st.metric(
                label="üîÑ Status",
                value="Ativo",
                delta="Sistema Funcionando"
            )
        
        with col4:
            st.metric(
                label="üìä √öltima Atualiza√ß√£o",
                value=datetime.now().strftime("%d/%m/%Y"),
                delta="Tempo Real"
            )
    
    def render_kpi_cards(self):
        """Renderiza cards de KPIs principais"""
        st.subheader("üéØ KPIs Principais")
        
        # Obter dados
        df_resumo = self.get_resumo_executivo()
        
        if df_resumo.empty:
            st.warning("‚ö†Ô∏è Nenhum dado encontrado")
            return
        
        # Calcular m√©tricas do ano
        receita_total = df_resumo['total_receitas'].sum()
        despesa_total = df_resumo['total_despesas'].sum()
        lucro_total = receita_total - despesa_total
        margem_media = df_resumo['margem_lucro_percentual'].mean()
        
        # Cards de m√©tricas
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                label="üí∞ Receita Total 2024",
                value=f"R$ {receita_total:,.2f}",
                delta=f"R$ {df_resumo['total_receitas'].iloc[0]:,.2f} (√∫ltimo m√™s)"
            )
        
        with col2:
            st.metric(
                label="üí∏ Despesa Total 2024",
                value=f"R$ {despesa_total:,.2f}",
                delta=f"R$ {df_resumo['total_despesas'].iloc[0]:,.2f} (√∫ltimo m√™s)"
            )
        
        with col3:
            st.metric(
                label="üìà Lucro Total 2024",
                value=f"R$ {lucro_total:,.2f}",
                delta=f"R$ {df_resumo['lucro_bruto'].iloc[0]:,.2f} (√∫ltimo m√™s)"
            )
        
        with col4:
            st.metric(
                label="üéØ Margem M√©dia 2024",
                value=f"{margem_media:.1f}%",
                delta=f"{df_resumo['margem_lucro_percentual'].iloc[0]:.1f}% (√∫ltimo m√™s)"
            )
    
    def render_grafico_evolucao(self):
        """Renderiza gr√°fico de evolu√ß√£o temporal"""
        st.subheader("üìà Evolu√ß√£o Financeira - 2024")
        
        df_resumo = self.get_resumo_executivo()
        
        if df_resumo.empty:
            st.warning("‚ö†Ô∏è Nenhum dado encontrado")
            return
        
        # Gr√°fico de linha
        fig = go.Figure()
        
        fig.add_trace(go.Scatter(
            x=df_resumo['mes_ano'],
            y=df_resumo['total_receitas'],
            mode='lines+markers',
            name='Receitas',
            line=dict(color='#28a745', width=3),
            marker=dict(size=8)
        ))
        
        fig.add_trace(go.Scatter(
            x=df_resumo['mes_ano'],
            y=df_resumo['total_despesas'],
            mode='lines+markers',
            name='Despesas',
            line=dict(color='#dc3545', width=3),
            marker=dict(size=8)
        ))
        
        fig.add_trace(go.Scatter(
            x=df_resumo['mes_ano'],
            y=df_resumo['lucro_bruto'],
            mode='lines+markers',
            name='Lucro Bruto',
            line=dict(color='#17a2b8', width=3),
            marker=dict(size=8)
        ))
        
        fig.update_layout(
            title="Evolu√ß√£o de Receitas, Despesas e Lucro",
            xaxis_title="M√™s",
            yaxis_title="Valor (R$)",
            hovermode='x unified',
            height=500
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    def render_grafico_margem(self):
        """Renderiza gr√°fico de margem de lucro"""
        st.subheader("üìä Margem de Lucro por Categoria")
        
        df_margem = self.get_margem_lucro()
        
        if df_margem.empty:
            st.warning("‚ö†Ô∏è Nenhum dado encontrado")
            return
        
        # Filtrar apenas receitas para margem
        df_receitas = df_margem[df_margem['tipo'] == 'receita']
        
        if df_receitas.empty:
            st.warning("‚ö†Ô∏è Nenhuma categoria de receita encontrada")
            return
        
        # Gr√°fico de barras
        fig = px.bar(
            df_receitas,
            x='nome_categoria',
            y='margem_lucro_percentual',
            color='margem_lucro_percentual',
            color_continuous_scale='RdYlGn',
            title="Margem de Lucro por Categoria de Receita",
            labels={'margem_lucro_percentual': 'Margem (%)', 'nome_categoria': 'Categoria'}
        )
        
        fig.update_layout(
            height=500,
            xaxis_tickangle=-45
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    def render_grafico_despesas(self):
        """Renderiza gr√°fico de despesas por categoria"""
        st.subheader("üí∏ Despesas por Categoria")
        
        df_despesas = self.get_despesas_categoria()
        
        if df_despesas.empty:
            st.warning("‚ö†Ô∏è Nenhum dado encontrado")
            return
        
        # Gr√°fico de pizza
        fig = px.pie(
            df_despesas,
            values='total_despesas',
            names='nome_categoria',
            title="Distribui√ß√£o de Despesas por Categoria",
            color_discrete_sequence=px.colors.qualitative.Set3
        )
        
        fig.update_layout(height=500)
        st.plotly_chart(fig, use_container_width=True)
    
    def render_tabela_metas(self):
        """Renderiza tabela de metas vs realizado"""
        st.subheader("üéØ Metas vs Realizado - Dezembro 2024")
        
        df_metas = self.get_receita_vs_meta()
        
        if df_metas.empty:
            st.warning("‚ö†Ô∏è Nenhum dado encontrado")
            return
        
        # Filtrar apenas dezembro
        df_dezembro = df_metas[df_metas['mes'] == 12]
        
        if df_dezembro.empty:
            st.warning("‚ö†Ô∏è Nenhum dado para dezembro encontrado")
            return
        
        # Preparar dados para exibi√ß√£o
        df_display = df_dezembro[['nome_categoria', 'tipo', 'meta_receita', 'receita_realizada', 
                                 'percentual_atingimento_receita', 'status_meta']].copy()
        
        # Formatar valores monet√°rios
        df_display['meta_receita'] = df_display['meta_receita'].apply(lambda x: f"R$ {x:,.2f}" if pd.notna(x) else "R$ 0,00")
        df_display['receita_realizada'] = df_display['receita_realizada'].apply(lambda x: f"R$ {x:,.2f}" if pd.notna(x) else "R$ 0,00")
        df_display['percentual_atingimento_receita'] = df_display['percentual_atingimento_receita'].apply(lambda x: f"{x:.1f}%" if pd.notna(x) else "0.0%")
        
        # Renomear colunas
        df_display.columns = ['Categoria', 'Tipo', 'Meta', 'Realizado', 'Atingimento', 'Status']
        
        st.dataframe(df_display, use_container_width=True)
    
    def render_tendencias_analise(self):
        """Renderiza an√°lise de tend√™ncias"""
        st.subheader("üìä An√°lise de Tend√™ncias")
        
        df_tendencias = self.get_tendencias()
        
        if df_tendencias.empty:
            st.warning("‚ö†Ô∏è Nenhum dado encontrado")
            return
        
        # M√©tricas de tend√™ncia
        col1, col2, col3 = st.columns(3)
        
        with col1:
            ultima_tendencia = df_tendencias['tendencia_receita'].iloc[-1]
            st.metric(
                label="üìà Tend√™ncia Receitas",
                value=ultima_tendencia,
                delta="√öltimo m√™s"
            )
        
        with col2:
            ultima_tendencia = df_tendencias['tendencia_despesa'].iloc[-1]
            st.metric(
                label="üí∏ Tend√™ncia Despesas",
                value=ultima_tendencia,
                delta="√öltimo m√™s"
            )
        
        with col3:
            ultima_tendencia = df_tendencias['tendencia_lucro'].iloc[-1]
            st.metric(
                label="üí∞ Tend√™ncia Lucro",
                value=ultima_tendencia,
                delta="√öltimo m√™s"
            )
        
        # Gr√°fico de varia√ß√£o percentual
        fig = go.Figure()
        
        fig.add_trace(go.Scatter(
            x=df_tendencias['mes_ano'],
            y=df_tendencias['variacao_receita_percentual'],
            mode='lines+markers',
            name='Varia√ß√£o Receitas (%)',
            line=dict(color='#28a745', width=3)
        ))
        
        fig.add_trace(go.Scatter(
            x=df_tendencias['mes_ano'],
            y=df_tendencias['variacao_despesa_percentual'],
            mode='lines+markers',
            name='Varia√ß√£o Despesas (%)',
            line=dict(color='#dc3545', width=3)
        ))
        
        fig.add_trace(go.Scatter(
            x=df_tendencias['mes_ano'],
            y=df_tendencias['variacao_lucro_percentual'],
            mode='lines+markers',
            name='Varia√ß√£o Lucro (%)',
            line=dict(color='#17a2b8', width=3)
        ))
        
        fig.update_layout(
            title="Varia√ß√£o Percentual Mensal",
            xaxis_title="M√™s",
            yaxis_title="Varia√ß√£o (%)",
            height=500
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    def render_sidebar(self):
        """Renderiza a barra lateral"""
        st.sidebar.title("‚öôÔ∏è Configura√ß√µes")
        
        # Filtros
        st.sidebar.subheader("üîç Filtros")
        
        ano_selecionado = st.sidebar.selectbox(
            "Ano",
            [2024, 2023, 2022],
            index=0
        )
        
        mes_selecionado = st.sidebar.selectbox(
            "M√™s",
            list(range(1, 13)),
            index=datetime.now().month - 1,
            format_func=lambda x: datetime(2024, x, 1).strftime("%B")
        )
        
        # Informa√ß√µes do sistema
        st.sidebar.subheader("‚ÑπÔ∏è Informa√ß√µes")
        st.sidebar.info("""
        **Dashboard de KPIs Financeiros**
        
        Este sistema fornece uma vis√£o executiva dos principais indicadores financeiros da empresa.
        
        **Desenvolvido com:**
        - Python + Streamlit
        - MySQL
        - Plotly
        """)
        
        # Bot√£o de atualiza√ß√£o
        if st.sidebar.button("üîÑ Atualizar Dados"):
            st.rerun()
        
        return ano_selecionado, mes_selecionado
    
    def render_footer(self):
        """Renderiza o rodap√©"""
        st.markdown("---")
        st.markdown("""
        <div style='text-align: center; color: #666;'>
        <p>üìä Dashboard de KPIs Financeiros - N√≠vel Avan√ßado</p>
        <p>Desenvolvido com foco em solu√ß√£o real para problemas reais de neg√≥cio</p>
        <p>√öltima atualiza√ß√£o: {}</p>
        </div>
        """.format(datetime.now().strftime("%d/%m/%Y %H:%M:%S")), unsafe_allow_html=True)
    
    def run(self):
        """Executa o dashboard"""
        try:
            # Header
            self.render_header()
            
            # Sidebar
            ano, mes = self.render_sidebar()
            
            # KPIs principais
            self.render_kpi_cards()
            
            # Gr√°ficos
            col1, col2 = st.columns(2)
            
            with col1:
                self.render_grafico_evolucao()
            
            with col2:
                self.render_grafico_margem()
            
            # Despesas e metas
            col1, col2 = st.columns(2)
            
            with col1:
                self.render_grafico_despesas()
            
            with col2:
                self.render_tabela_metas()
            
            # An√°lise de tend√™ncias
            self.render_tendencias_analise()
            
            # Footer
            self.render_footer()
            
        except Exception as e:
            logger.error(f"‚ùå Erro no dashboard: {e}")
            st.error(f"‚ùå Erro no dashboard: {e}")
        
        finally:
            if self.connection and self.connection.is_connected():
                self.connection.close()

def main():
    """Fun√ß√£o principal"""
    st.title("üìä Dashboard Executivo de KPIs Financeiros")
    
    # Verificar se o banco est√° acess√≠vel
    try:
        dashboard = DashboardKPIs()
        dashboard.run()
    except Exception as e:
        st.error(f"‚ùå Erro ao inicializar dashboard: {e}")
        st.info("üí° Verifique se o banco de dados est√° configurado e acess√≠vel")

if __name__ == "__main__":
    main()
